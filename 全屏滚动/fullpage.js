class FullPage {
    constructor() {
        const html = document.documentElement;
        // ÊâÄÊúâÂçïÈ°µ
        const pageList = [...document.querySelectorAll('section')];
        // ÊâÄÊúâÂçïÈ°µ‰ΩçÁΩÆ
        const pagesTop = [];
        // ÊØèÈ°µÈ´òÂ∫¶
        const pagesHeight = [];

        pageList.forEach(item=>{
            pagesTop.push(item.offsetTop);
            pagesHeight.push(item.offsetHeight);
        })

        // ÊÄªÈ°µÈù¢Êï∞
        const pages = pageList.length;
        // ÂΩìÂâçÈ°µÈù¢
        let currentPage = 0;
        // ‰∏äÊ¨°È°µÈù¢
        let lastPage = 0;
        // ÊªöËΩÆËÆ°Êï∞
        let upCount = 0;
        let downCount = 0;
        // ÈöêËóèÊªöÂä®Êù°
        document.documentElement.style.overflow = 'hidden'
        // ÁÆÄÂçïÊµãËØïÊµèËßàÂô®ÊòØÂê¶ÊîØÊåÅ‰∫ã‰ª∂ÔºåÂõ†‰∏∫ÁÅ´Áãê‰∏çÊîØÊåÅmousewheel
        if('onmousewheel' in document) {
            window.addEventListener('mousewheel', e=>{
                wheelThrottled(e)
            })
        }
        window.addEventListener('DOMMouseScroll', e=>{
            wheelThrottled(e)
        })

        const wheelThrottled = throttle(wheel, 1000)

        /**
         * Èº†Ê†áÊªöÂä®‰∫ã‰ª∂
         * @param {Object} e 
         */
        function wheel(e) {
            // Âå∫ÂàÜÁÅ´ÁãêÂíåË∞∑Ê≠å
            let scorllDir = e.detail === 0 ?  -e.wheelDelta : e.detail
            console.log(e)
            if(scorllDir > 0) {
                console.log('üîª');
                html.scrollTop = pageList[++currentPage]
            }else {
                console.log('üî∫');
            }
        }

       /**
        * ÂáΩÊï∞ËäÇÊµÅ
        * @param {Function} fn 
        * @param {Number} delay 
        */
        function throttle(fn, delay) {
            let timerId;
            let last;
            return function () {
                const _this = this;
                const args = [...arguments];
                const now = Date.now();
                if(last && now < last + delay) {
                    clearTimeout(timerId);
                    timerId =  setTimeout(()=>{
                        last = now;
                        fn.apply(_this, args)
                    }, delay)
                }else {
                    clearTimeout(timerId);
                    last = now;
                    fn.apply(_this, args);
                }
            }
        }
    }
}